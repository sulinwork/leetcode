    class Solution {
        public List<Integer> eventualSafeNodes(int[][] graph) {
            LinkedList<Integer> res = new LinkedList<>();
//            Map<Integer, List<Integer>> ref = new HashMap<>();
//            for (int i = 0; i < graph.length; i++) {
//                for (int j = 0; j < graph[i].length; j++) {
//                    List<Integer> orDefault = ref.getOrDefault(graph[i][j], new ArrayList<>());
//                    orDefault.add(i);
//                }
//            }
            TreeSet<Integer> set = new TreeSet<>();
            for (int i = graph.length - 1; i >= 0; i--) {
                boolean can = true;
                if (graph[i].length != 0) {
                    for (int i1 : graph[i]) {
                        if (!set.contains(i1)) {
                            can = false;
                            break;
                        }
                    }
                }
                if (can) {
                    res.addFirst(i);
                    set.add(i);
                }
            }
            return res;
        }
    }

//total_testcases:112
//total_correct:68
//input_formatted:[[],[0,2,3,4],[3],[4],[]]
//expected_output:[0,1,2,3,4]
//code_output:[0,2,3,4]
